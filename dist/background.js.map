{"version":3,"file":"background.js","mappingssources":["webpack://reactJS_chrome_extension/./src/background/background.ts"],"sourcesContent":["console.log('this is working from background.ts');\n// import * as tf from '@tensorflow/tfjs';\n// import * as cocoSsd from '@tensorflow-models/coco-ssd';\n// import '@tensorflow/tfjs-backend-cpu';\n// import '@tensorflow/tfjs-backend-webgl';\n// let model: cocoSsd.ObjectDetection;\n// const loadModel = async () => {\n//   console.log(\"Loading TensorFlow and coco-ssd model...\");\n//   await tf.ready();\n//   model = await cocoSsd.load();\n//   console.log(\"Model loaded successfully!\");\n// };\n// const cocossd = require('@tensorflow-models/coco-ssd');\n// if (!cocossd) {\n//           console.error();\n//           console.log(\"fail to load model\");\n//       }else \n//       {\n//         console.log(\"the model is loaded\", cocossd)\n//       }\nchrome.runtime.onInstalled.addListener(() => {\n    // loadModel();\n    // Create the context menu\n    chrome.contextMenus.create({\n        id: \"startDetecting\",\n        title: \"Start Detection on Google\",\n        contexts: [\"all\"],\n    });\n    chrome.contextMenus.create({\n        id: \"stopDetecting\",\n        title: \"Stop Detection on Google\",\n        contexts: [\"all\"],\n    });\n});\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n    if (info.menuItemId === 'startDetecting') {\n        chrome.tabs.sendMessage(tab.id, { type: 'startDetecting' });\n    }\n    else if (info.menuItemId === 'stopDetecting') {\n        chrome.tabs.sendMessage(tab.id, { type: 'stopDetecting' });\n    }\n});\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n//   if (message.type === \"processFrame\") {\n//     const { frameData } = message;\n//     const img = new Image();\n//     const imageURL = URL.createObjectURL(frameData);\n//     img.src = imageURL;\n//     img.onload = async () => {\n//       const predictions = await model.detect(img);\n//       console.log(\"Predictions:\", predictions);\n//       URL.revokeObjectURL(imageURL);\n//       sendResponse(predictions);\n//     };\n//     return true; // Indicates that the response will be sent asynchronously\n//   }\n// });\n// // Types for Chrome Manifest V3\n// type Message = {\n//   type: string;\n//   tabId?: number;\n// };\n// // Listen for installation and create a context menu item\n// chrome.runtime.onInstalled.addListener(() => {\n//   chrome.contextMenus.create({\n//     id: \"logMeetVideoStream\",\n//     title: \"Log Google Meet Video\",\n//     contexts: [\"page\"],\n//     documentUrlPatterns: [\"*://meet.google.com/*\"]\n//   })\n// });\n// // Handle context menu click\n// chrome.contextMenus.onClicked.addListener((info, tab) => {\n//   if (info.menuItemId === \"logMeetVideoStream\" && tab) {\n//     logMeetVideoStream(tab.id);\n//   }\n// });\n// Handle context menu click\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n    if (info.menuItemId === \"logMeetVideoStream\" && tab) {\n        chrome.tabs.sendMessage(tab.id, { type: \"logMeetVideoStream\" });\n    }\n});\n// async function clickMenuCallback() {\n//         chrome.tabs.query({ active: true, currentWindow: true }, async (tabs) => {\n//             const constraints = {\n//                 video: true\n//               };\n//               const video = document.createElement('video');\n//               navigator.mediaDevices.getUserMedia(constraints).\n//                 then((stream) => {video.srcObject = stream});\n//                 video.play();\n//             // Classify the image.\n//             const predictions = await cocossd.detect(video);\n//             console.log('Predictions: ');\n//             console.log(predictions);\n//         });\n// };\n// chrome.runtime.onInstalled.addListener(() => {\n//     chrome.contextMenus.create({\n//       id: 'contextMenu0',\n//       title: 'detect objects with TensorFlow.js ',\n//       contexts: ['page'],\n//     });\n//   });\n//   chrome.contextMenus.onClicked.addListener(clickMenuCallback);\n// async function loadedModel(){\n//     try {\n//         const model = await cocoSsd.load();\n//         console.log(\"model is loaded\", model);\n//     }catch (err){\n//         console.log(err)\n//         console.log(\"fail to load model\")\n//     }\n// }\n// loadedModel()\n//   function openCam(){\n//   const constraints = {\n//     video: true\n//   };\n//   const video = document.querySelector('video');\n//   navigator.mediaDevices.getUserMedia(constraints).\n//     then((stream) => {video.srcObject = stream});\n// }\n// function runCoco (){\n//     async () => {\n//         // 3. TODO - Load network \n//         // e.g. const net = await cocossd.load();\n//         const net = await cocossd.load();\n//         if (!net){\n//           console.error(\"the model is not loaded\")\n//         } \n//           console.log(\"the model is loaded!\")\n//       };\n// } \n// runCoco();\n"],"names":[],"sourceRoot":""}